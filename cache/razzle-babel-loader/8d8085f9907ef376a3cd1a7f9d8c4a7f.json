{"ast":null,"code":"var _jsxFileName = \"/Users/mostafataghipour/Desktop/untitled folder/web/src/App.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport useAppLocale from \"./hooks/useAppLocale\";\nimport Routes from \"./Routes\";\nimport { Layout } from \"./components/Custom/Layout/Layout\";\nimport ApplyTheme from \"./components/ApplyTheme\";\nimport \"./App.scss\";\nimport useAppTheme from \"./hooks/useAppTheme\";\n\nconst App = () => {\n  const {\n    locale,\n    isRTL,\n    t\n  } = useAppLocale();\n  const {\n    theme: {\n      primaryColor,\n      bgColor,\n      textColor,\n      roundness,\n      breakpoints\n    },\n    themeName\n  } = useAppTheme();\n  return __jsx(React.Fragment, null, __jsx(ApplyTheme, {\n    colors: {\n      primaryColor,\n      bgColor,\n      textColor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }), __jsx(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, __jsx(\"html\", {\n    lang: locale,\n    dir: isRTL ? \"rtl\" : \"ltr\",\n    \"data-theme\": themeName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, t(\"site_title\")), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"Sample application\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), __jsx(\"style\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, `\n\n            :root{\n              --roundness : ${roundness}px;\n              --sm: ${breakpoints.sm}px,\n              --md: ${breakpoints.md}px,\n              --lg: ${breakpoints.lg}px,\n              --xl: ${breakpoints.xl}px,\n              --xxl: ${breakpoints.xxl}px,\n            }\n\n          `), __jsx(\"script\", {\n    type: \"application/ld+json\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, JSON.stringify({\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    itemListElement: [{\n      \"@type\": \"ListItem\",\n      position: 1,\n      item: {\n        \"@id\": \"https://example.com/books\",\n        name: \"Books\",\n        image: \"http://example.com/images/icon-book.png\"\n      }\n    }]\n  }))), __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;\n/**\n * TODO:\n * dynamicrendering\n * prerendering\n * staticrendering\n * pwa\n * publish\n * minify\n * code splitting\n * redux + thunk + persist\n * web api\n * auth\n * error handeling\n * date\n * 404\n * app name\n * style in ssr\n * page structure\n * router + type script\n * router auth guard\n * css typescript\n * test\n * storybook\n */","map":{"version":3,"sources":["/Users/mostafataghipour/Desktop/untitled folder/web/src/App.tsx"],"names":["React","Helmet","useAppLocale","Routes","Layout","ApplyTheme","useAppTheme","App","locale","isRTL","t","theme","primaryColor","bgColor","textColor","roundness","breakpoints","themeName","sm","md","lg","xl","xxl","JSON","stringify","itemListElement","position","item","name","image"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,OAAO,YAAP;AACA,OAAOC,WAAP,MAAwB,qBAAxB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAuBR,YAAY,EAAzC;AACA,QAAM;AACJS,IAAAA,KAAK,EAAE;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA,OAAhB;AAAyBC,MAAAA,SAAzB;AAAoCC,MAAAA,SAApC;AAA+CC,MAAAA;AAA/C,KADH;AAEJC,IAAAA;AAFI,MAGFX,WAAW,EAHf;AAKA,SACE,4BACE,MAAC,UAAD;AACE,IAAA,MAAM,EAAE;AACNM,MAAAA,YADM;AAENC,MAAAA,OAFM;AAGNC,MAAAA;AAHM,KADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAEN,MADR;AAEE,IAAA,GAAG,EAAEC,KAAK,GAAG,KAAH,GAAW,KAFvB;AAGE,kBAAYQ,SAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQP,CAAC,CAAC,YAAD,CAAT,CANF,EAOE;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAC,oBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACZ;AACA;AACA,8BAA8BK,SAAU;AACxC,sBAAsBC,WAAW,CAACE,EAAG;AACrC,sBAAsBF,WAAW,CAACG,EAAG;AACrC,sBAAsBH,WAAW,CAACI,EAAG;AACrC,sBAAsBJ,WAAW,CAACK,EAAG;AACrC,uBAAuBL,WAAW,CAACM,GAAI;AACvC;AACA;AACA,WAZQ,CATF,EAwBE;AAAQ,IAAA,IAAI,EAAC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,SAAL,CAAe;AACd,gBAAY,mBADE;AAEd,aAAS,gBAFK;AAGdC,IAAAA,eAAe,EAAE,CACf;AACE,eAAS,UADX;AAEEC,MAAAA,QAAQ,EAAE,CAFZ;AAGEC,MAAAA,IAAI,EAAE;AACJ,eAAO,2BADH;AAEJC,QAAAA,IAAI,EAAE,OAFF;AAGJC,QAAAA,KAAK,EAAE;AAHH;AAHR,KADe;AAHH,GAAf,CADH,CAxBF,CARF,EAkDE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAlDF,CADF;AAwDD,CA/DD;;AAiEA,eAAetB,GAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport useAppLocale from \"./hooks/useAppLocale\";\nimport Routes from \"./Routes\";\nimport { Layout } from \"./components/Custom/Layout/Layout\";\nimport ApplyTheme from \"./components/ApplyTheme\";\n\nimport \"./App.scss\";\nimport useAppTheme from \"./hooks/useAppTheme\";\n\nconst App = () => {\n  const { locale, isRTL, t } = useAppLocale();\n  const {\n    theme: { primaryColor, bgColor, textColor, roundness, breakpoints },\n    themeName,\n  } = useAppTheme();\n\n  return (\n    <>\n      <ApplyTheme\n        colors={{\n          primaryColor,\n          bgColor,\n          textColor,\n        }}\n      />\n      <Helmet>\n        <html\n          lang={locale}\n          dir={isRTL ? \"rtl\" : \"ltr\"}\n          data-theme={themeName}\n        />\n        <title>{t(\"site_title\")}</title>\n        <meta name=\"description\" content=\"Sample application\" />\n\n        <style>\n          {`\n\n            :root{\n              --roundness : ${roundness}px;\n              --sm: ${breakpoints.sm}px,\n              --md: ${breakpoints.md}px,\n              --lg: ${breakpoints.lg}px,\n              --xl: ${breakpoints.xl}px,\n              --xxl: ${breakpoints.xxl}px,\n            }\n\n          `}\n        </style>\n\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"http://schema.org\",\n            \"@type\": \"BreadcrumbList\",\n            itemListElement: [\n              {\n                \"@type\": \"ListItem\",\n                position: 1,\n                item: {\n                  \"@id\": \"https://example.com/books\",\n                  name: \"Books\",\n                  image: \"http://example.com/images/icon-book.png\",\n                },\n              },\n            ],\n          })}\n        </script>\n      </Helmet>\n      <Layout>\n        <Routes />\n      </Layout>\n    </>\n  );\n};\n\nexport default App;\n\n/**\n * TODO:\n * dynamicrendering\n * prerendering\n * staticrendering\n * pwa\n * publish\n * minify\n * code splitting\n * redux + thunk + persist\n * web api\n * auth\n * error handeling\n * date\n * 404\n * app name\n * style in ssr\n * page structure\n * router + type script\n * router auth guard\n * css typescript\n * test\n * storybook\n */\n"]},"metadata":{},"sourceType":"module"}